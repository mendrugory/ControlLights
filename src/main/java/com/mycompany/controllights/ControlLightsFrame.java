/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.controllights;

import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mendrugory
 */
public class ControlLightsFrame extends javax.swing.JFrame
{

    private String portName = "None";
    private SerialPortComm serialPortComm;

    /**
     * Creates new form ControlLightsFrame
     */
    public ControlLightsFrame()
    {
        initComponents();
    }

    public void init()
    {
        addSerialPorts();

        SerialPortParameters parameters = new SerialPortParameters();
        parameters.setDataBits(SerialPort.DATABITS_8);
        parameters.setDataRate(115200);
        parameters.setParity(SerialPort.PARITY_NONE);
        parameters.setStopBits(SerialPort.STOPBITS_1);
        parameters.setTimeOut(2000);

        serialPortComm = new SerialPortComm();
        serialPortComm.setParameters(parameters);

        new Thread()
        {

            @Override
            public void run()
            {
                while (true)
                {
                    if (serialPortComm.isConnected())
                    {
                        lblConnected.setText("Connected");
                        lblConnected.setForeground(Color.green);
                    } else
                    {
                        lblConnected.setText("Disconnected");
                        lblConnected.setForeground(Color.red);
                    }
                }
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        redButton = new javax.swing.JButton();
        yellowButton = new javax.swing.JButton();
        greenButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        comboPort = new javax.swing.JComboBox();
        btnDisconnect = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        lblConnected = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        redButton.setText("Red");
        redButton.setMaximumSize(new java.awt.Dimension(60, 30));
        redButton.setMinimumSize(new java.awt.Dimension(60, 30));
        redButton.setPreferredSize(new java.awt.Dimension(60, 30));
        redButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redButtonActionPerformed(evt);
            }
        });

        yellowButton.setText("Yellow");
        yellowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowButtonActionPerformed(evt);
            }
        });

        greenButton.setText("Green");
        greenButton.setMaximumSize(new java.awt.Dimension(60, 30));
        greenButton.setMinimumSize(new java.awt.Dimension(60, 30));
        greenButton.setPreferredSize(new java.awt.Dimension(60, 30));
        greenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenButtonActionPerformed(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        comboPort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPortActionPerformed(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        lblConnected.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblConnected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDisconnect))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(redButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(yellowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(greenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(comboPort, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yellowButton)
                    .addComponent(redButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(greenButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDisconnect)
                    .addComponent(btnConnect)
                    .addComponent(lblConnected))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void redButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_redButtonActionPerformed
    {//GEN-HEADEREND:event_redButtonActionPerformed
        send("red");
    }//GEN-LAST:event_redButtonActionPerformed

    private void yellowButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_yellowButtonActionPerformed
    {//GEN-HEADEREND:event_yellowButtonActionPerformed
        send("yellow");
    }//GEN-LAST:event_yellowButtonActionPerformed

    private void greenButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_greenButtonActionPerformed
    {//GEN-HEADEREND:event_greenButtonActionPerformed
        send("green");
    }//GEN-LAST:event_greenButtonActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDisconnectActionPerformed
    {//GEN-HEADEREND:event_btnDisconnectActionPerformed
        if (serialPortComm != null)
        {
            serialPortComm.close();
        }
        addSerialPorts();
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        if (serialPortComm != null && !serialPortComm.isConnected())
        {
            portName = comboPort.getSelectedItem().toString();
            writeInTheTextArea("The choosen port is " + portName);
            serialPortComm.setPortName(portName);
            serialPortComm.connect();
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void comboPortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_comboPortActionPerformed
    {//GEN-HEADEREND:event_comboPortActionPerformed
    }//GEN-LAST:event_comboPortActionPerformed

    private void send(String command)
    {
        if (serialPortComm != null)
        {
            if (serialPortComm.isConnected())
            {
                serialPortComm.sendMessage(command);
            }
        }
    }

    private void writeInTheTextArea(String s)
    {
        txtArea.setText(s + '\n' + txtArea.getText());
    }

    public void addSerialPorts()
    {
        comboPort.removeAllItems();

        Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();
        while (portEnum.hasMoreElements())
        {
            CommPortIdentifier currPortId = (CommPortIdentifier) portEnum.nextElement();
            comboPort.addItem(currPortId.getName());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JComboBox comboPort;
    private javax.swing.JButton greenButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblConnected;
    private javax.swing.JButton redButton;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JButton yellowButton;
    // End of variables declaration//GEN-END:variables

    private class SerialPortComm extends SerialPortCommunicator
    {

        @Override
        public synchronized void serialEvent(SerialPortEvent oEvent)
        {
            if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE)
            {
                try
                {
                    Thread.sleep(10);
                    int available = input.available();
                    byte chunk[] = new byte[available];
                    input.read(chunk, 0, available);
                    writeInTheTextArea(new String(chunk));
                } catch (IOException ex)
                {
                    Logger.getLogger(ControlLightsFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex)
                {
                    Logger.getLogger(ControlLightsFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
        // Ignore all the other eventTypes, but you should consider the other ones.
    }
}
